[
    {
        "problemListName": "青铜",
        "problemList": [
            {
                "_id": 1
            },
            {
                "_id": 2
            }
        ],
        "problemListTag": "L2",
        "data": {
            "results": [
                {
                    "id": 35,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 157,
                    "title": "【4】1判断闰年",
                    "description": "<p>判断一个整数n是否是闰年。一个年份n是不是闰年需要满足以下两个条件其中之一即可：</p><p>1.年份n能被4整除，且n不能被100整除</p><p>2.年份n是400的倍数</p>",
                    "input_description": "<p>一行，输入一个整数n。</p>",
                    "output_description": "<p>一行，如果是闰年，输出 n&quot; is leap year.&quot;；否则，输出 n&quot; is not leap year.&quot;。</p>",
                    "samples": [
                        {
                            "input": "2000",
                            "output": "2000 is leap year."
                        },
                        {
                            "input": "1900",
                            "output": "1900 is not leap year."
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=2019，</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341193&courseId=215304179&fid=0&knowledgeId=385132107\" target=\"_blank\">视频讲解</a></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-03-19T06:12:34.686762Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 1502,
                    "accepted_number": 494,
                    "statistic_info": {
                        "0": 494,
                        "4": 3,
                        "8": 135,
                        "-1": 114,
                        "-2": 116
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 439,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 435,
                    "title": "【9】循环左移",
                    "description": "<p>设将n(1&lt;n&lt;=100)个整数存放到一维数组R中。试设计一个在时间和空间两方面都尽可能高校的算法。将R中保存的序列循环左移p(0&lt;p&lt;n)个位置，即将R中的数据由(x0,x1,....xn-1)变换为(xp,xp+1,...xn-1,x0,x1,...,xp-1)。</p>",
                    "input_description": "<p>第一行输入数组长度n和左移位数p第二行输入n个数</p>",
                    "output_description": "<p>循环左移后的数组的值</p>",
                    "samples": [
                        {
                            "input": "8 3\n1 2 3 4 5 6 7 8",
                            "output": "4 5 6 7 8 1 2 3"
                        }
                    ],
                    "hint": "<p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680743381&courseId=215304179&fid=0&knowledgeId=387006652\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:39:21.350813Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 61,
                    "accepted_number": 49,
                    "statistic_info": {
                        "0": 49,
                        "8": 3,
                        "-1": 8,
                        "-2": 1
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 130,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 510,
                    "title": "【11】我要建地铁",
                    "description": "<p>某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，……，L，都种有一棵树。</p><p>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。 已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p>",
                    "input_description": "<p>输入的第一行有两个整数：L（1 &lt;= L &lt;= 10000）和 M（1 &lt;= M &lt;= 100），L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。</p>",
                    "output_description": "<p>输出包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。</p>",
                    "samples": [
                        {
                            "input": "500 3\n150 300\n100 200\n470 471",
                            "output": "298"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-15T12:11:00.133047Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 196,
                    "accepted_number": 99,
                    "statistic_info": {
                        "0": 99,
                        "4": 13,
                        "8": 15,
                        "-1": 27,
                        "-2": 42
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 120,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1001,
                    "title": "【1】 标题统计",
                    "description": "<p>凯凯刚写了一篇美妙的作文，请问这篇作文的标题中有多少个字符？ 注意：标题中可能包含大、小写英文字母、数字字符、空格和换行符。统计标题字 符数时，空格和换行符不计算在内。</p>",
                    "input_description": "<p>输入文件只有一行，一个字符串 s。</p>",
                    "output_description": "<p>输出文件只有一行，包含一个整数，即作文标题的字符数（不含空格和换行符）。</p>",
                    "samples": [
                        {
                            "input": "234 ",
                            "output": "3"
                        },
                        {
                            "input": "Ca 45 ",
                            "output": "4"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-10T02:59:16.854504Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 210,
                    "accepted_number": 130,
                    "statistic_info": {
                        "0": 130,
                        "4": 2,
                        "8": 11,
                        "-1": 18,
                        "-2": 36
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 411,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 566,
                        "username": "彭纪洪",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1003,
                    "title": "【1】定义并使用函数",
                    "description": "<p>有这样一个表达式$y = ax^2+ bx+ c$，要求将该表达式写成函数func，该函数接收4个参数a，b，c，x；另外定义一个函数print，该函数会输出表达式的结果。</p>",
                    "input_description": "<p>输入为一行，有4个浮点数a,b,c,x。<br /></p>",
                    "output_description": "<p>输出为一行，一个浮点数。保留4位小数输出。</p>",
                    "samples": [
                        {
                            "input": "2 3 4 2\n",
                            "output": "18.0000\n"
                        },
                        {
                            "input": "0 1 2 4\n",
                            "output": "6.0000\n"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:09:55.063515Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 131,
                    "accepted_number": 80,
                    "statistic_info": {
                        "0": 80,
                        "8": 33,
                        "-1": 8,
                        "-2": 10
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 412,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 566,
                        "username": "彭纪洪",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1004,
                    "title": "【1】幂级数",
                    "description": "<p>请你实现一个函数 pow，该函数传入一个整数 n，返回$ 2^n$的值。</p>",
                    "input_description": "<p>输入一个整数 n（0≤n≤62）。</p>",
                    "output_description": "<p>输出为1个整数，$2^n$</p>",
                    "samples": [
                        {
                            "input": "0",
                            "output": "1"
                        },
                        {
                            "input": "10",
                            "output": "1024"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:10:01.037017Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 248,
                    "accepted_number": 87,
                    "statistic_info": {
                        "0": 87,
                        "8": 133,
                        "-1": 15,
                        "-2": 13
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 413,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 566,
                        "username": "彭纪洪",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1005,
                    "title": "【1】最大的数",
                    "description": "<p>请你实现一个函数 max，该.函数传入一个数组 a，和数组的长度 n，数组 a 中最大的值。$（n 不大于10^5，数组 a 中的每个值不超过 10^9）$</p>",
                    "input_description": "<p>第1行输入一个整数 n；接下来一行输入 n 个整数，用空格隔开。</p>",
                    "output_description": "<p>输出这个数组中最大的值</p>",
                    "samples": [
                        {
                            "input": "6\n1 7 3 9 12 5\n",
                            "output": "12"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:11:19.727114Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 130,
                    "accepted_number": 92,
                    "statistic_info": {
                        "0": 92,
                        "4": 3,
                        "8": 11,
                        "-1": 8,
                        "-2": 16
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 126,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1006,
                    "title": "【1】短信费用",
                    "description": "<p>用手机发短信，一条短信资费为0.1元，但限定一条短信的内容在70个字以内(包括70个字）。如果你一次所发送的短信超过了70个字，则会按照每70个字一条短信的限制把它分割成多条短信发送。假设已经知道你当月所发送的短信的字数，试统计一下你当月短信的总资费。</p>",
                    "input_description": "<p>第一行是整数n，表示当月发送短信的总次数，接着n行每行一个整数，表示每次短信的字数。</p>",
                    "output_description": "<p>输出一行，当月短信总资费，单位为元，精确到小数点后1位。</p>",
                    "samples": [
                        {
                            "input": "10\n39\n49\n42\n61\n44\n147\n42\n72\n35\n46",
                            "output": "1.3"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-15T12:10:04.864182Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 172,
                    "accepted_number": 120,
                    "statistic_info": {
                        "0": 120,
                        "1": 1,
                        "8": 8,
                        "-1": 20,
                        "-2": 23
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 448,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1103,
                    "title": "【2】字符串的拷贝",
                    "description": "<p>编写一函数，完成一个字符串的拷贝，要求用字符指针实现。在主函数中输入任意字符串，调用该函数之后输出拷贝后的字符串。</p>",
                    "input_description": "<p>输入任意字符串(不含空格)</p>",
                    "output_description": "<p>输出其拷贝字符串</p>",
                    "samples": [
                        {
                            "input": "abccbd",
                            "output": "abccbd"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:41:51.086169Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 77,
                    "accepted_number": 68,
                    "statistic_info": {
                        "0": 68,
                        "4": 1,
                        "-1": 2,
                        "-2": 6
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 191,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1301,
                    "title": "【5】去掉某几位",
                    "description": "<p>输入一个高精度的正整数num（num不超过240位），去掉其中任意t个数字后剩下的数字按<strong>原左右次序</strong>组成一个新的正整数。编程对给定的num和t，寻找一种方案使得剩下的数字组成的<strong>新数最小</strong>，并输出新的正整数。</p>",
                    "input_description": "<p>输入为2行，第1行为高精度整数num（num不超过240位）；第2行为要删掉的位数t（t小于num的位数）。</p>",
                    "output_description": "<p>输出为1行，一个最小的新数。</p>",
                    "samples": [
                        {
                            "input": "175438\n4",
                            "output": "13"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-06-24T07:34:14.964465Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 250,
                    "accepted_number": 67,
                    "statistic_info": {
                        "0": 67,
                        "1": 1,
                        "8": 111,
                        "-1": 54,
                        "-2": 17
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 190,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1302,
                    "title": "【5】快递装箱",
                    "description": "<p>一个工厂制造的产品形状都是长方体，它们的高度都是h，长和宽都相等，一共有六个型号，他们的长宽分别为1*1，2*2，3*3，4*4，5*5，6*6。这些产品通常使用一个6*6*h 的长方体包裹包装然后邮寄给客户。因为邮费很贵，所以工厂要想方设法的减小每个订单运送时的包裹数量。他们很需要有一个好的程序帮他们解决这个问题从而节省费用。现在这个程序由你来设计。</p>",
                    "input_description": "<p>输入包括几行，每一行代表一个订单。每个订单里的一行包括六个整数，中间用空格隔开，分别为1*1至6*6这六种产品的数量。输入以6个0组成的一行结尾。</p>",
                    "output_description": "<p>除了输入的最后一行6个0以外，输入文件里每一行对应着输出文件的一行，每一行输出一个整数代表对应的订单所需的最小包裹数。</p>",
                    "samples": [
                        {
                            "input": "0 0 4 0 0 1\n7 5 1 0 0 0\n0 0 0 0 0 0",
                            "output": "2\n1"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-06-24T07:34:09.913092Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 216,
                    "accepted_number": 74,
                    "statistic_info": {
                        "0": 74,
                        "4": 3,
                        "8": 56,
                        "-1": 42,
                        "-2": 41
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 189,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1303,
                    "title": "【5】接水问题",
                    "description": "<p>学校里有一个水房，水房里一共装有m个龙头可供同学们打开水，每个龙头每秒钟的供水量相等，均为1。现在有n名同学准备接水，他们的初始接水顺序已经确定。将这些同学按接水顺序从1到n编号，i号同学的接水量为wi。接水开始时，1到m号同学各占一个水龙头，并同时打开水龙头接水。当其中某名同学j完成其接水量要求wj后，下一名排队等候接水的同学k马上接替j同学的位置开始接水。这个换人的过程是瞬间完成的，且没有任何水的浪费。即j同学第x秒结束时完成接水，则k同学第x+1 秒立刻开始接水。 若当前接水人数n&#039;不足m，则只有n&#039;个龙头供水，其它 m-n&#039;个龙头关闭。现在给出n名同学的接水量，按照上述接水规则，问所有同学都接完水需要多少秒。</p>",
                    "input_description": "<p>第1行有2个整数n和m，用一个空格隔开，分别表示接水人数和龙头个数（1≤n≤10000，1≤m≤100）。第2行有n个整数 w1、w2、……、wn，每两个整数之间用一个空格隔开，wi表示i号同学的接水量。</p>",
                    "output_description": "<p>输出只有一行，1个整数，表示接水所需的总时间。</p>",
                    "samples": [
                        {
                            "input": "5 3\n4 4 1 2 1",
                            "output": "4"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-06-23T13:04:20.765991Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 264,
                    "accepted_number": 123,
                    "statistic_info": {
                        "0": 123,
                        "1": 2,
                        "8": 106,
                        "-1": 11,
                        "-2": 22
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 188,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1304,
                    "title": "【5】活动安排",
                    "description": "<p>设有n个活动的集合 E={1,2,…,n}，其中每个活动都要求使用同一资源，如演讲会场等，而在同一时间内只有一个活动能使用这一资源。每个活动i都有一个要求使用该资源的起始时间 si 和一个结束时间 fi,且 si&lt;fi。如果选择了活动i，则它在半开时间区间 [si, fi) 内占用资源。若区间 [si, fi) 与区间 [sj, fj) 不相交,则称活动i与活动j是相容的。也就是说，当 si≥fj 或 sj≥fi 时，活动i与活动j相容。选择出由相互兼容的活动组成的最大集合。</p>",
                    "input_description": "<p>第1行一个整数n(n ≤ 1000)，接下来n行，每行两个整数si和fi。</p>",
                    "output_description": "<p>输出为一个整数，输出尽可能多的互相兼容的活动个数。</p>",
                    "samples": [
                        {
                            "input": "4 \n1 3 \n4 6 \n2 5 \n1 7 ",
                            "output": "2"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-06-23T13:04:13.397761Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 199,
                    "accepted_number": 95,
                    "statistic_info": {
                        "0": 95,
                        "8": 72,
                        "-1": 14,
                        "-2": 18
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 187,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1305,
                    "title": "【5】新加勒比海盗",
                    "description": "<p>有一天，海盗们截获了一艘装满各种各样古董的货船，虽然海盗船足够大，但载重量为C，每件古董的重量为Wi，海盗们该如何把尽可能多数量的宝贝装上海盗船呢？</p>",
                    "input_description": "<p>输入为3行。第1行输入海盗船的载重量C (1≤C≤100)；第2行输入古董总个数n (其中1≤n≤100)；第3行输入n个古董的重量，每2个数用空格隔开。数据均为整数。</p>",
                    "output_description": "<p>输出为1行，为装入海盗船的各个古董的重量（每两个重量之间用空格隔开）。若一个都装不下，则输出0。</p>",
                    "samples": [
                        {
                            "input": "30\n8\n4 10 7 11 3 5 14 2",
                            "output": "2 3 4 5 7"
                        },
                        {
                            "input": "5\n2\n7 8",
                            "output": "0"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-06-23T13:04:08.077089Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 153,
                    "accepted_number": 77,
                    "statistic_info": {
                        "0": 77,
                        "8": 60,
                        "-1": 3,
                        "-2": 13
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 186,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1306,
                    "title": "【5】加勒比海盗船",
                    "description": "<p>有一天，海盗们截获了一艘装满各种各样古董的货船，虽然海盗船足够大，但载重量为C，每件古董的重量为Wi，海盗们该如何把尽可能多数量的宝贝装上海盗船呢？</p>",
                    "input_description": "<p>输入为3行。第1行输入海盗船的载重量C (1≤C≤100)；第2行输入古董总个数n (其中1≤n≤100)；第3行输入n个古董的重量，每2个数用空格隔开。数据均为整数。</p>",
                    "output_description": "<p>输出为1行，为装入海盗船的古董数。</p>",
                    "samples": [
                        {
                            "input": "30\n8\n4 10 7 11 3 5 14 2",
                            "output": "5"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-06-23T13:04:00.885885Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 168,
                    "accepted_number": 119,
                    "statistic_info": {
                        "0": 119,
                        "8": 23,
                        "-1": 15,
                        "-2": 11
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 165,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1307,
                    "title": "【5】电池寿命",
                    "description": "<p>小S新买了一个掌上游戏机，这个游戏机由两节5号电池供电。为了保证能够长时间玩游戏，他买了很多5号电池，这些电池的生产商不同，质量也有差异，因而使用寿命也有所不同，有的能使用5个小时，有的可能就只能使用3个小时。显然如果他只有两个电池一个能用5小时一个能用3小时，那么他只能玩3个小时的游戏，有一个电池剩下的电量无法使用，但是如果他有更多的电池，就可以更加充分地利用它们，比如他有三个电池分别能用3、3、5小时，他可以先使用两节能用3个小时的电池，使用半个小时后再把其中一个换成能使用5个小时的电池，两个半小时后再把剩下的一节电池换成刚才换下的电池（那个电池还能用2.5个小时），这样总共就可以使用5.5个小时，没有一点浪费。</p><p>现在已知电池的数量和电池能够使用的时间，请你找一种方案使得使用时间尽可能的长。</p>",
                    "input_description": "<p>输入包含多组数据。每组数据包括两行，第一行是一个整数N (2 ≤ N ≤ 1000)，表示电池的数目，接下来一行是N个正整数表示电池能使用的时间。</p>",
                    "output_description": "<p>对每组数据输出一行，表示电池能使用的时间，保留到小数点后1位。</p>",
                    "samples": [
                        {
                            "input": "2\n3 5\n3\n3 3 5",
                            "output": "3.0\n5.5"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-06-07T10:45:02.022014Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 137,
                    "accepted_number": 57,
                    "statistic_info": {
                        "0": 57,
                        "1": 12,
                        "4": 2,
                        "8": 34,
                        "-1": 19,
                        "-2": 13
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 128,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1455,
                    "title": "【7】数的计数",
                    "description": "<p>我们要求找出具有下列性质数的个数(包含输入的自然数nn)。</p><p>先输入一个自然数 n~(n\\le 1000)n (n≤1000)，然后对此自然数按照如下方法进行处理：</p><p>1.不作任何处理；</p><p>2.在它的左边加上一个自然数，但该自然数不能超过原数的一半；</p><p>3.加上数后，继续按此规则进行处理,直到不能再加自然数为止。</p>",
                    "input_description": "<p>自然数n</p>",
                    "output_description": "<p>满足条件的数的个数</p>",
                    "samples": [
                        {
                            "input": "6",
                            "output": "6"
                        }
                    ],
                    "hint": "<p>满足条件的数为 6 (此部分不必输出)，他们分别是：</p><p>（1）6</p><p>（2）16</p><p>（3）26</p><p>（4）126</p><p>（5）36</p><p>（6）136</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-15T12:10:24.826700Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 142,
                    "accepted_number": 95,
                    "statistic_info": {
                        "0": 95,
                        "4": 5,
                        "8": 13,
                        "-1": 5,
                        "-2": 24
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 129,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1552,
                    "title": "【8】爬楼梯",
                    "description": "<p>树老师爬楼梯，他可以每次走1级或者2级，输入楼梯的级数，求不同的走法数。</p><p>例如：楼梯一共有3级，他可以每次都走一级，或者第一次走一级，第二次走两级，也可以第一次走两级，第二次走一级，一共3种方法。</p>",
                    "input_description": "<p>输入包含若干行，每行包含一个正整数N，代表楼梯级数，1≤N≤30。</p>",
                    "output_description": "<p>不同的走法数，每一行输入对应一行输出。</p>",
                    "samples": [
                        {
                            "input": "5\n8\n10",
                            "output": "8\n34\n89"
                        }
                    ],
                    "hint": "<p>while(scanf(&quot;%d&quot;,&n)!=EOF){    //}可以连续的输入若干行，直到输入CTRL+Z停止输入。</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-15T12:10:30.343744Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 174,
                    "accepted_number": 99,
                    "statistic_info": {
                        "0": 99,
                        "2": 2,
                        "4": 8,
                        "8": 31,
                        "-1": 18,
                        "-2": 16
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 417,
                    "tags": [
                        "L2",
                        "map"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1958,
                    "title": "【18】水果店",
                    "description": "<p>小明经营着一个不大的水果店。他认为生存之道就是经营最受顾客欢迎的水果。现在他想要一份水果销售情况的明细表，这样就可以很容易掌握所有水果的销售情况了。小明告诉你每一笔销售记录的水果名称，产地和销售的数量，请你帮他生成明细表。</p>",
                    "input_description": "<p>第一行是一个整数 N(0&lt;N≤1000)，表示小明有 N 次成功的交易。其后有 N 行数据，每行表示一次交易，由水果名称(小写字母组成，长度不超过 100)，水果产地(小写字母组成，长度不超过 100)和交易的水果数目(正整数，不超过 1000)组成。</p>",
                    "output_description": "<p>请你输出一份排版格式正确(请分析样本输出)的水果销售情况明细表。这份明细表包括所有水果的产地、名称和销售数目的信息。水果先按产地分类，产地按字母顺序排列；同一产地的水果按照名称排序，名称按字母顺序排序。</p>",
                    "samples": [
                        {
                            "input": "5\napple shandong 3\npineapple guangdong 1\nsugarcane guangdong 1\npineapple guangdong 3\npineapple guangdong 1\n",
                            "output": "guangdong\n   |----pineapple(5)\n   |----sugarcane(1)\nshandong\n   |----apple(3)\n"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:31:52.955226Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 65,
                    "accepted_number": 28,
                    "statistic_info": {
                        "0": 28,
                        "1": 5,
                        "4": 2,
                        "8": 4,
                        "-1": 12,
                        "-2": 14
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 418,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1960,
                    "title": "【18】小明学英语",
                    "description": "<p>小明快要考托福了，这几天，小明每天早上都起来记英语单词。小红时不时地来考一考小明：小红会询问小明一个单词，如果小明背过这个单词，小明会告诉小红这个单词的意思，不然小明会跟小红说还没有背过。单词是由连续的大写或者小写字母组成。注意单词中字母大小写是等价的。比如You和you是一个单词。</p>",
                    "input_description": "<p>首先输入一个 n(1≤n≤100000) 表示事件数。接下来 n 行，每行表示一个事件。每个事件输入为一个整数 d 和一个单词 word（单词长度不大于 2020），用空格隔开。如果 d=0，表示小明记住了 word 这个单词，如果 d=1，表示这是一个测试，测试小明是否认识单词 word（小红永远不会告诉小明这个单词的意思）。事件的输入是按照时间先后顺序输入的。</p>",
                    "output_description": "<p>对于小红的每次测试，如果小明认识这个单词，输出一行Yes, 否则输出一行No。</p>",
                    "samples": [
                        {
                            "input": "5\n0 we\n0 are\n1 family\n0 Family\n1 Family\n",
                            "output": "No\nYes\n"
                        },
                        {
                            "input": "4\n1 mengma\n0 Mengma\n0 MENGMA\n1 MengMa\n",
                            "output": "No\nYes\n"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:32:20.710154Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 151,
                    "accepted_number": 84,
                    "statistic_info": {
                        "0": 84,
                        "4": 2,
                        "8": 7,
                        "-1": 41,
                        "-2": 17
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 419,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1961,
                    "title": "【18】堆积木",
                    "description": "<p>小明有 n 块积木，编号分别为 1 到 n。一开始，蒜头把第 i 块积木放在位置 i。小明进行 m 次操作，每次操作，小明把位置 b 上的积木整体移动到位置 a 上面。比如 1 位置的积木是 1，2 位置的积木是 2，那么把位置 2 的积木移动到位置 1 后，位置 1 上的积木从下到上依次为 1,2。</p>",
                    "input_description": "<p>输入格式第一行输入 2 个整数n,m(1≤n≤10000,0≤m≤10000)。接下来 m 行，每行输入 2 个整数 a,b(1≤a,b≤n)，如果a，b 相等则本次不需要移动。</p>",
                    "output_description": "<p>输出 第 i 行输出位置 i 从下到上的积木编号，如果该行没有积木则不输出。</p>",
                    "samples": [
                        {
                            "input": "2 2\n1 2\n1 2\n",
                            "output": "1 2"
                        },
                        {
                            "input": "4 4\n3 1\n4 3\n2 4\n2 2\n",
                            "output": "2 4 3 1"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:32:32.008458Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 146,
                    "accepted_number": 85,
                    "statistic_info": {
                        "0": 85,
                        "3": 3,
                        "4": 1,
                        "8": 27,
                        "-1": 16,
                        "-2": 14
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 363,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 569,
                        "username": "黄家明",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2017,
                    "title": "【9】Checkout Assistant",
                    "description": "<p>Bob 来到一家现购自运商店，将 n 件商品放入了他的手推车，然后到收银台付款。每件商品由它的价格 pi 和收银员扫描它的时间 ti 秒定义。当收银员正在扫描某件商品时，Bob 可以从他的手推车中偷走某些其它商品。Bob 需要恰好 1 秒来偷走一件商品。Bob 需要付给收银员的最少钱数是多少？请记住，收银员扫描商品的顺序由 Bob 决定。</p>",
                    "input_description": "<p>第一行整数n代表物品数目</p><p>接下来n行每行两个整数ti, pi</p>",
                    "output_description": "<p>Bob 需要付给收银员的最少钱数</p>",
                    "samples": [
                        {
                            "input": "4\n2 10\n0 20\n1 5\n1 3",
                            "output": "8"
                        }
                    ],
                    "hint": "<ul><li>$1 \\le n \\le 2000$</li><li>$0 \\le t_i \\le 2000$</li><li>$1 \\le p_i \\le 10^9$</li></ul>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-18T04:14:42.598023Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 95,
                    "submission_number": 11,
                    "accepted_number": 3,
                    "statistic_info": {
                        "0": 3,
                        "-1": 1,
                        "-2": 7
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 1311,
                    "tags": [
                        "L2",
                        "练习"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2018,
                    "title": "【9】汽车费用",
                    "description": "<p>一个特别的单行街道在每公里处有一个汽车站。顾客根据他们乘坐汽车的公里使来付费。例如下表就是一个费用的单子。</p><p>没有一辆车子行驶超过10公里，一个顾客打算行驶n公里（1&lt;=n&lt;=100），它可以通过无限次的换车来完成旅程。最后要求费用最少。</p>",
                    "input_description": "<p>第一行十个整数分别表示行走1到10公里的费用（&lt;=500）。注意这些数并无实际的经济意义，即行驶10公里费用可能比行驶一公里少。</p><p>第二行一个整数n表示，旅客的总路程数。</p>",
                    "output_description": "<p>仅一个整数表示最少费用。<br /></p>",
                    "samples": [
                        {
                            "input": "12 21 31 40 49 58 69 79 90 101\n15\n",
                            "output": "147"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-11-08T13:13:49.702748Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 9,
                    "accepted_number": 5,
                    "statistic_info": {
                        "0": 5,
                        "4": 1,
                        "-2": 3
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 362,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 569,
                        "username": "黄家明",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2028,
                    "title": "【15】神奇的口袋",
                    "description": "<p>有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。</p><p>John现在有n(1≤n ≤ 20)个想要得到的物品，每个物品 的体积分别是a1，a2......an。John可以从这些物品中选择一 些，如果选出的物体的总体积是40，那么利用这个神奇的口 袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。</p>",
                    "input_description": "<p>输入的第一行是正整数n (1 &lt;= n &lt;= 20)，表示不同的物品的 数目。接下来的n行，每行有一个1到40之间的正整数，分别 给出a1，a2......an的值。</p>",
                    "output_description": "<p>输出不同的选择物品的方式的数目。</p>",
                    "samples": [
                        {
                            "input": "3\n20 20 20",
                            "output": "3"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-18T04:02:54.593039Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 5,
                    "accepted_number": 5,
                    "statistic_info": {
                        "0": 5
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 364,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 569,
                        "username": "黄家明",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2161,
                    "title": "【8】Buy Low Buy Lower",
                    "description": "<p>“逢低吸纳”是炒股的一条成功秘诀。如果你想成为一个成功的投资者，就要遵守这条秘诀: &quot;逢低吸纳,越低越买&quot; 这句话的意思是:每次你购买股票时的股价一定要比你上次购买时的股价低.按照这个规则购买股票的次数越多越好，看看你<strong>最多能按这个规则买几次</strong>。</p><p>给定连续的 N 天中每天的股价。你可以在任何一天购买一次股票，但是购买时的股价一定要比你上次购买时的股价低。写一个程序，求出最多能买几次股票。 以下面这个表为例, 某几天的股价是:</p><p>| 天数 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |</p><p>| 股价 | 68 | 69 | 54 | 64 | 68 | 64 | 70 | 67 | 78 | 62 | 98 | 87 |</p><p>这个例子中, 聪明的投资者(按上面的定义)，如果每次买股票时的股价都比上一次买时低，那么他最 多能买 4 次股票。一种买法如下(可能有其他的买法):</p><p>| 天数 | 2 | 5 | 6 | 10 |</p><p>| 股价 | 69 | 68 | 64 | 62 |</p>",
                    "input_description": "<p>第 1 行: N (1 &lt;= N &lt;= 3000), 表示能买股票的天数。</p><p>第 2 行以下: N 个正整数 (可能分多行) ，第 i 个正整数表示第 i 天的股价.</p>",
                    "output_description": "<p>只有一行，输出两个整数:</p><p>能够买进股票的<strong>天数长度</strong>达到这个值的股票购买<strong>方案数量</strong>。在计算解的数量的时候，如果两个解所组成的字符串相同，那么这样的两个解被认为是相同的(只能算做一个解)。因此，两个不同的购买方案可能产生同一个字符串，这样只能计算一次。</p>",
                    "samples": [
                        {
                            "input": "12\n68 69 54 64 68 64 70 67 78 62 98 87\n\n",
                            "output": "4 2"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-18T06:12:41.291521Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 8,
                    "accepted_number": 3,
                    "statistic_info": {
                        "0": 3,
                        "4": 1,
                        "-1": 2,
                        "-2": 2
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 365,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 569,
                        "username": "黄家明",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2162,
                    "title": "【8】音量调节",
                    "description": "<p>一个吉他手准备参加一场演出。他不喜欢在演出时始终使用同一个音量，所以他决定每一首歌之前他都要改变一次音量。在演出开始之前，他已经做好了一个列表，里面写着在每首歌开始之前他想要改变的音量是多少。每一次改变音量，他可以选择调高也可以调低。音量用一个整数描述。输入文件中给定整数beginLevel，代表吉他刚开始的音量，以及整数maxLevel，代表吉他的最大音量。音量不能小于0也不能大于maxLevel。输入文件中还给定了n个整数c1,c2,c3…..cn，表示在第i首歌开始之前吉他手想要改变的音量是多少。吉他手想以最大的音量演奏最后一首歌，你的任务是找到这个最大音量是多少。</p>",
                    "input_description": "<p>第一行依次为三个整数：n, beginLevel, maxlevel。第二行依次为n个整数：c1,c2,c3…..cn。</p>",
                    "output_description": "<p>输出演奏最后一首歌的最大音量。如果吉他手无法避免音量低于0或者高于maxLevel，输出-1。</p>",
                    "samples": [
                        {
                            "input": "3 5 10\n5 3 7",
                            "output": "10"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=50,</p><p>1&lt;ci&lt;=Maxlevel</p><p>1&lt;=maxlevel&lt;=1000</p><p>0&lt;=beginlevel&lt;=maxlevel</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-18T06:28:51.331277Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 46,
                    "accepted_number": 6,
                    "statistic_info": {
                        "0": 6,
                        "8": 16,
                        "-1": 3,
                        "-2": 21
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 406,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 568,
                        "username": "李超",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2163,
                    "title": "机器人走方格",
                    "description": "<p>M * N的方格，一个机器人从左上走到右下，只能向右或向下走。有多少种不同的走法？由于方法数量可能很大，只需要输出Mod 10^9 + 7的结果<br /></p>",
                    "input_description": "<pre>第1行，2个数M,N，中间用空格隔开。（2 &lt;= m,n &lt;= 1000)</pre>",
                    "output_description": "<pre>输出走法的数量。</pre>",
                    "samples": [
                        {
                            "input": "2 3",
                            "output": "3"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T05:21:01.519054Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 135,
                    "accepted_number": 50,
                    "statistic_info": {
                        "0": 50,
                        "1": 8,
                        "4": 7,
                        "-1": 34,
                        "-2": 34
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 310,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 568,
                        "username": "李超",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2164,
                    "title": "【8】最大子段和",
                    "description": "<p>给出一段序列，选出其中连续且非空的一段使得这段和最大。</p>",
                    "input_description": "<p>第一行是一个正整数N，表示了序列的长度。(1&lt;=N&lt;=200000)</p><p>第二行包含N个绝对值不大于10000的整数Ai ，描述了这段序列。</p>",
                    "output_description": "<p>一个整数，为最大的子段和是多少。子段的最小长度为1。</p>",
                    "samples": [
                        {
                            "input": "7\n2 -4 3 -1 2 -4 3",
                            "output": "4"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-15T07:52:12.723582Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 104,
                    "accepted_number": 54,
                    "statistic_info": {
                        "0": 54,
                        "1": 4,
                        "4": 12,
                        "8": 15,
                        "-1": 12,
                        "-2": 7
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 579,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2165,
                    "title": "【8】友好城市",
                    "description": "<p>Palmia国有一条横贯东西的大河，河有笔直的南北两岸，岸上各有位置各不相同的N个城市。北岸的每个城市有且仅有一个友好城市在南岸，而且不同城市的友好城市不相同。</p><p>每对友好城市都向政府申请在河上开辟一条直线航道连接两个城市，但是由于河上雾太大，政府决定避免任意两条航道交叉，以避免事故。编程帮助政府做出一些批准和拒绝申请的决定，使得在保证任意两条航线不相交的情况下，被批准的申请尽量多。</p>",
                    "input_description": "<p>第1行，一个整数N(1&lt;=N&lt;=5000)，表示城市数。</p><p>第2行到第n+1行，每行两个整数，中间用1个空格隔开，分别表示南岸和北岸的一对友好城市的坐标。(0&lt;=xi&lt;=10000)</p>",
                    "output_description": "<p>仅一行，输出一个整数，表示政府所能批准的最多申请数。<br /></p>",
                    "samples": [
                        {
                            "input": "7\n22 4\n2 6\n10 3\n15 12\n9 8\n17 17\n4 2",
                            "output": "4"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-28T02:33:16.341069Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 34,
                    "accepted_number": 14,
                    "statistic_info": {
                        "0": 14,
                        "8": 15,
                        "-1": 4,
                        "-2": 1
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 580,
                    "tags": [
                        "L2",
                        "动态规划"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2166,
                    "title": "【8】合唱队形",
                    "description": "<p>N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。</p><p>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …, K，他们的身高分别为T1, T2, …, TK，则他们的身高满足T1 &lt; T2 &lt; … &lt; Ti , Ti &gt; Ti+1 &gt; … &gt; TK (1≤i≤K)。</p><p>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p>",
                    "input_description": "<p>第一行是一个整数N（2 ≤ N ≤ 100），表示同学的总数。第二行有n个整数，用空格分隔，第i个整数Ti（130 ≤ Ti ≤ 230）是第i位同学的身高（厘米）。<br /></p>",
                    "output_description": "<p>一行，这一行只包含一个整数，就是最少需要几位同学出列。<br /></p>",
                    "samples": [
                        {
                            "input": "8\n186 186 150 200 160 130 197 220",
                            "output": "4"
                        }
                    ],
                    "hint": "<p>对于50%的数据，保证有n ≤ 20；对于全部的数据，保证有n≤100。<br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-28T02:37:18.712282Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 24,
                    "accepted_number": 13,
                    "statistic_info": {
                        "0": 13,
                        "8": 7,
                        "-1": 1,
                        "-2": 3
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 1448,
                    "tags": [
                        "L2",
                        "LCIS"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2167,
                    "title": "【8】神秘的咒语",
                    "description": "<p>身为拜月教的高级间谍，你的任务总是逼迫你出生入死。比如这一次，拜月教主就派你跟踪赵灵儿一行，潜入试炼窟底。</p><p>据说试炼窟底藏着五行法术的最高法术：风神，雷神，雪妖，火神，山神的咒语。为了习得这些法术，要付出艰辛的努力，但是回报同样十分丰厚。</p><p>拜月希望你告诉他咒语的长度为多少。（你：“请问您想知道咒语的具体内容吗？”拜月：“想，但是vijos不支持special judge。”-_-原来大人物也有大人物的悲哀。。。）<br />于是你偷偷躲在一边，想乘机看看咒语究竟是什么。突然，天空（？？试炼窟底看的到天空？？）出现了两条非常长的数字串，你抓狂了。究竟哪个才是真正的咒语呢？你突然想到，这两个都不是咒语（不妨称之为伪咒语），而真正的咒语却与他们有着密切的联系。于是你打开拜月亲手给你写的纸条：&quot;The Real Incantation is Their Common Increasing Subsequence of Maximal Possible Length&quot;<br />&quot;该死的拜月，居然还会E文!&quot;你咒骂着，但为了一家老小的生命，又不得不卖命地算着咒语的长度。</p>",
                    "input_description": "<p>第一行为1个数N,代表有N组测试数据。</p><p>对于每组测试数据，描述了两条数字串，首先一个数字为一条伪咒语的长度M，接下来M个数描述了伪咒语的内容。</p>",
                    "output_description": "<p>共N行，每行一个数字，描叙了对应咒语的长度。<br /></p>",
                    "samples": [
                        {
                            "input": "1\n5 1 4 2 5 -12\n4 -12 1 2 4\n",
                            "output": "2"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-12-11T02:11:49.603294Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 36,
                    "accepted_number": 8,
                    "statistic_info": {
                        "0": 8,
                        "8": 20,
                        "-1": 3,
                        "-2": 5
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 1449,
                    "tags": [
                        "L2",
                        "LCIS"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2168,
                    "title": "【8】最长公共上升子序列",
                    "description": "<p>熊大妈的奶牛在小沐沐的熏陶下开始研究信息题目。小沐沐先让奶牛研究了最长上升子序列，再让他们研究了最长公共子序列，现在又让他们要研究最长公共上升子序列了。</p><p>小沐沐说，对于两个串A，B，如果它们都包含一段位置不一定连续的数字，且数字是严格递增的，那么称这一段数字是两个串的公共上升子串，而所有的公共上升子串中最长的就是最长公共上升子串了。</p><p>奶牛半懂不懂，小沐沐要你来告诉奶牛什么是最长公共上升子串。不过，只要告诉奶牛它的长度就可以了。</p>",
                    "input_description": "<p>第一行N，表示A，B的长度。</p><p>第二行，串A。</p><p>第三行，串B。</p>",
                    "output_description": "<p>输出长度。<br /></p>",
                    "samples": [
                        {
                            "input": "4\n2 2 1 3\n2 1 2 3\n",
                            "output": "2"
                        }
                    ],
                    "hint": "<p>1&lt;=N&lt;=3000，A，B中的数字不超过maxlongint<br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-12-11T02:22:54.434934Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 55,
                    "accepted_number": 25,
                    "statistic_info": {
                        "0": 25,
                        "8": 18,
                        "-1": 7,
                        "-2": 5
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 1459,
                    "tags": [
                        "L2",
                        "子矩阵"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2169,
                    "title": "【8】最大子矩阵和",
                    "description": "<p>已知矩阵的大小定义为矩阵中所有元素的和。给定一个矩阵，你的任务是找到最大的非空(大小至少是1 × 1)子矩阵。<br /><br /></p>",
                    "input_description": "<p>输入是一个N×N的矩阵。</p><p>输入的第一行给出N(0&lt;N≤100)。再后面的若干行中，依次(首先从左到右给出第一行的N个整数，再从左到右给出第二行的N个整数……)给出矩阵中的N2个整数，整数之间由空白字符分隔(空格或者空行)。已知矩阵中整数的范围都在[−127,127]。</p>",
                    "output_description": "<p>输出最大子矩阵的大小。<br /><br /></p>",
                    "samples": [
                        {
                            "input": "4\n0 -2 -7  0\n9  2 -6  2\n-4  1 -4  1\n-1  8  0 -2",
                            "output": "15"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-12-18T02:36:02.443750Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 43,
                    "accepted_number": 20,
                    "statistic_info": {
                        "0": 20,
                        "3": 7,
                        "4": 1,
                        "8": 3,
                        "-1": 10,
                        "-2": 2
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 416,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2306,
                    "title": "【4】阶乘和",
                    "description": "<p>用高精度计算出S=1!+2!+3!+…+n!（n≤50）,其中“!”表示阶乘，例如：5!=5×4×3×2×1。</p><p>输入正整数n，输出计算结果S。</p>",
                    "input_description": "<p>一个正整数n。</p>",
                    "output_description": "<p>计算结果S。</p>",
                    "samples": [
                        {
                            "input": "5",
                            "output": "153"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:31:28.519017Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 131,
                    "accepted_number": 54,
                    "statistic_info": {
                        "0": 54,
                        "4": 2,
                        "8": 50,
                        "-1": 10,
                        "-2": 15
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 132,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2352,
                    "title": "【5】约瑟夫环",
                    "description": "<p>n个人站成一圈，从某个人开始数数，每次数到m的人就被杀掉，然后下一个人重新开始数，直到最后只剩一个人。现在有一圈人，k个好人站在一起，k个坏人站在一起。从第一个好人开始数数。你要确定一个最小的m，使得在第一个好人被杀死前，k个坏人先被杀死。</p>",
                    "input_description": "<p>一个k(0&lt;k&lt;14)</p>",
                    "output_description": "<p>一个m</p>",
                    "samples": [
                        {
                            "input": "3",
                            "output": "5"
                        },
                        {
                            "input": "4",
                            "output": "30"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-15T12:11:37.566643Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 99,
                    "submission_number": 226,
                    "accepted_number": 137,
                    "statistic_info": {
                        "0": 137,
                        "1": 21,
                        "4": 2,
                        "8": 17,
                        "-1": 16,
                        "-2": 33
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 133,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2451,
                    "title": "【6】括号匹配",
                    "description": "<p>假设一个字符串中包含圆括号，方括号，花括号3种类型的括号，编写一个算法来判别表达式中的括号是否匹配,匹配则输出&quot;Yes&quot;,不匹配则输出&quot;No&quot;。</p>",
                    "input_description": "<p>一个包含圆括号，方括号，花括号的字符串。</p>",
                    "output_description": "<p>Yes或者No</p>",
                    "samples": [
                        {
                            "input": "{}[]()",
                            "output": "Yes"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-15T12:11:54.111747Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 309,
                    "accepted_number": 118,
                    "statistic_info": {
                        "0": 118,
                        "2": 3,
                        "4": 7,
                        "8": 98,
                        "-1": 50,
                        "-2": 33
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 134,
                    "tags": [
                        "L2"
                    ],
                    "created_by": {
                        "id": 2,
                        "username": "newkey",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 2453,
                    "title": "【6】后缀表达式的值",
                    "description": "<p>从键盘读入一个后缀表达式（字符串），只含有0-9组成的运算数及加（+）、减（—）、乘（）、除（/）四种运算符。每个运算数之间用一个空格隔开，不需要判断给你的表达式是否合法（我们保证一定合法）。以@作为结束标志。比如，16–9(4+3)转换成后缀表达式为16 9 4 3 +*-</p>",
                    "input_description": "<p>一个后缀表达式</p>",
                    "output_description": "<p>表达式的值</p>",
                    "samples": [
                        {
                            "input": "16 9 4 3 +*-@",
                            "output": "-47"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-15T12:11:59.625711Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 210,
                    "accepted_number": 107,
                    "statistic_info": {
                        "0": 107,
                        "1": 2,
                        "3": 1,
                        "4": 8,
                        "8": 28,
                        "-1": 22,
                        "-2": 42
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                }
            ],
            "total": 37
        },
        "_expanded": false,
        "_disableExpand": false
    },
    {
        "problemListName": "白银",
        "problemList": [
            {
                "_id": 8
            },
            {
                "_id": 9
            }
        ],
        "problemListTag": "L1",
        "data": {
            "results": [
                {
                    "id": 1735,
                    "tags": [
                        "L1",
                        "语言基础"
                    ],
                    "created_by": {
                        "id": 1056,
                        "username": "秦文成",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 8,
                    "title": "【1】输出字符画",
                    "description": "<p>请输出如下字符画:</p><pre><code class=\"lang-cpp\">\n  *\n  *\n*****\n  *\n  *\n\n</code></pre>",
                    "input_description": "<p>本题无输入<br /></p>",
                    "output_description": "<p>输出如上字符画,请注意第1,2,4,5行单个字符，前面有两个空格，后面也有两个空格<br /></p>",
                    "samples": [
                        {
                            "input": "略",
                            "output": "略"
                        }
                    ],
                    "hint": "<p>注意空格</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675351727&courseId=215304179&fid=0&knowledgeId=384182400\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++",
                        "Java",
                        "Python2",
                        "Python3"
                    ],
                    "create_time": "2020-08-25T06:39:57.703537Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 74,
                    "accepted_number": 35,
                    "statistic_info": {
                        "0": 35,
                        "-1": 29,
                        "-2": 10
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 456,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 11,
                    "title": "【1】小小裁缝师",
                    "description": "<p>服装厂原来要做一套衣服用布3.2m，改进裁剪方法后，每套衣服用布2.8m。原来做791套衣服的布，现在可以做多少套？</p>",
                    "input_description": "<p>本题无输入</p>",
                    "output_description": "<p>输出为一个具体的数字，不需要单位。</p>",
                    "samples": [
                        {
                            "input": "无",
                            "output": "无"
                        }
                    ],
                    "hint": "<p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675340226&courseId=215304179&fid=0&knowledgeId=384183375\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:45:54.123447Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 534,
                    "accepted_number": 296,
                    "statistic_info": {
                        "0": 296,
                        "-1": 56,
                        "-2": 182
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 457,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 12,
                    "title": "【1】买铅笔",
                    "description": "<p>买5支铅笔要0.6元，买同样的铅笔16支，需要多少钱？</p>",
                    "input_description": "<p>此题无输入</p>",
                    "output_description": "<p>输出为一个具体的数字，表示钱数，不需要单位。</p>",
                    "samples": [
                        {
                            "input": "无",
                            "output": "无"
                        }
                    ],
                    "hint": "<p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675340268&courseId=215304179&fid=0&knowledgeId=384183392\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:45:57.827424Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 524,
                    "accepted_number": 296,
                    "statistic_info": {
                        "0": 296,
                        "4": 1,
                        "-1": 62,
                        "-2": 165
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 455,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 16,
                    "title": "【1】猜数游戏",
                    "description": "<p>有一个“就是它”的猜数游戏，步骤如下：请你任意输入的一个三位数 x ，在这个三位数后重复一遍，得到一个六位数（例如，467 → 467467，123 → 123123），再把这个数连续除以7、11、13，最后的商 y 就是你输入的三位数。请加以验证。</p>",
                    "input_description": "<p>输入一个三位数整数 x。</p>",
                    "output_description": "<p>输出一个三位数整数 y。</p>",
                    "samples": [
                        {
                            "input": "467",
                            "output": "467"
                        }
                    ],
                    "hint": "<p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675340281&courseId=215304179&fid=0&knowledgeId=384183406\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:45:17.390486Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 640,
                    "accepted_number": 284,
                    "statistic_info": {
                        "0": 284,
                        "4": 4,
                        "8": 48,
                        "-1": 117,
                        "-2": 184
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 452,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 57,
                    "title": "【2】捡石头",
                    "description": "<p>憨厚的老农昨天捡到了3块小石头，他想再去捡一个小石头，让这4个石头正好一共重20斤，请问他应该去捡一个多少斤的石头？</p>",
                    "input_description": "<p>输入为一行，以空格分隔的3个整数 a，b，c，表示这3个石头的重量，其中 0＜a+b+c＜20。</p>",
                    "output_description": "<p>输出为一行，结果为整数，表示农夫应该去捡一个多少斤的石头。</p>",
                    "samples": [
                        {
                            "input": "3 5 7",
                            "output": "5"
                        }
                    ],
                    "hint": "<p>本题为常规的算术题，已知3个石头的重量，很容易求出第4个石头的重量。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675340533&courseId=215304179&fid=0&knowledgeId=384183594\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:43:49.593900Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 453,
                    "accepted_number": 276,
                    "statistic_info": {
                        "0": 276,
                        "4": 1,
                        "-1": 35,
                        "-2": 141
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 453,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 110,
                    "title": "【3】银行利息",
                    "description": "<p>按年利率 R% 存入本钱 X，存入 P 年后的本利合计为 $Y=X*{((100+R)/100)}^{P}$，求 Y 的值。（结果保留2位小数）</p>",
                    "input_description": "<p>输入为一行，以空格分隔的3个浮点数 X，R，P，其中 0≤ X ≤ 10000000， 0≤ R ≤ 100，0≤ P ≤ 100。</p>",
                    "output_description": "<p>输出为一行，结果为浮点数 Y，表示存入 P 年后的总金额。（结果保留2位小数）</p>",
                    "samples": [
                        {
                            "input": "1000 10 2",
                            "output": "1210.00"
                        },
                        {
                            "input": "800 5.5 4",
                            "output": "991.06"
                        }
                    ],
                    "hint": "<p>本题的计算过程题目都给了，需要注意的有2点：</p><ol><li><p>一旦题目中说要使用浮点数，就必须使用double类型（而不是float类型），否则会有精度误差，造成结果错误；</p></li><li><p>本题明确要求保留2位小数，可以使用 printf 函数来进行小数位数的保留（printf函数在头文件cstdio中）。</p></li><li><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675340893&courseId=215304179&fid=0&knowledgeId=385131447\" target=\"_blank\">视频讲解</a><br /></p></li></ol>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:43:52.870515Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 439,
                    "accepted_number": 216,
                    "statistic_info": {
                        "0": 216,
                        "8": 3,
                        "-1": 133,
                        "-2": 87
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 454,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 111,
                    "title": "【3】矩形填充",
                    "description": "<p>已知矩形的大小为 n × m，现用 a × a 的正方形填充该矩形，求至多能填入多少正方形？（正方形可以刚好碰到矩形边界，但不能超出矩形外）</p>",
                    "input_description": "<p>输入为一行，以空格分隔的3个整数 n, m, a，其中 $n, m, a ≤ 10^9$。</p>",
                    "output_description": "<p>输出为一行，一个整数，表示正方形的个数。</p>",
                    "samples": [
                        {
                            "input": "5 10 4",
                            "output": "2"
                        },
                        {
                            "input": "8 12 4",
                            "output": "6"
                        }
                    ],
                    "hint": "<p>一个矩形（就是长方形）能够容纳多少个正方形，不能光看面积，而要看矩形的各边长和正方形的编长。比如有一个4x8的矩形和3*3的正方形，矩形只能放下2个正方形。所以，本题的重点应该看边长。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341102&courseId=215304179&fid=0&knowledgeId=385131908\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:43:55.665035Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 331,
                    "accepted_number": 224,
                    "statistic_info": {
                        "0": 224,
                        "8": 64,
                        "-1": 23,
                        "-2": 20
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 1739,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1056,
                        "username": "秦文成",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 115,
                    "title": "【3】printf标志符介绍2",
                    "description": "<p>本题介绍另外一种printf标志符,左对齐与右对齐标志符.输出数字的时候,我们可以使用它来进行左对齐或是右对齐.用法是这样的:在百分号前面添负号或是正号(正号可省略),再加上数字.即可控制数字右对齐或是左对齐.你可以试试如下代码的效果再做本题.</p><pre><code class=\"lang-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main(){\n    int k=9;\n    printf(&quot;|%5d|\\n&quot;,k);\n    printf(&quot;|%d%d%d%d%d|\\n&quot;,k,k,k,k,k);\n    printf(&quot;|%-5d|\\n&quot;,k);\n    return 0;\n}\n</code></pre>",
                    "input_description": "<p>本题无输入<br /></p>",
                    "output_description": "<pre><code class=\"lang-cpp\">int kkk=999999999;\nprintf(&quot;|%9lld|%-9lld|\\n&quot;,kkk,kkk);kkk/=10;\n</code></pre><p>灵活使用上面的代码输出如下图形(请重复使用第二行的代码控制来控制9的数目和位置,请不要直接cout或printf原样输出,一定要用到上面的代码)</p><pre><code>|999999999|999999999|\n| 99999999|99999999 |\n|  9999999|9999999  |\n|   999999|999999   |\n|    99999|99999    |\n|     9999|9999     |\n|      999|999      |\n|       99|99       |\n|        9|9        |\n</code></pre>",
                    "samples": [
                        {
                            "input": "本题无输入",
                            "output": "略"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++",
                        "Java",
                        "Python2",
                        "Python3"
                    ],
                    "create_time": "2020-08-31T09:27:36.083092Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 28,
                    "accepted_number": 17,
                    "statistic_info": {
                        "0": 17,
                        "-1": 8,
                        "-2": 3
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 451,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 156,
                    "title": "【4】判断学生成绩",
                    "description": "<p>输入学生成绩，根据成绩好坏输出相应评语。<br /></p><ul><li>如果成绩大于等于90分，则输出“优秀”；</li><li>如果成绩大于等于80分且小于90分，则输出“良好”；</li><li>如果成绩大于等于60分且小于80分，则输出“及格”；</li><li>如果成绩小于60分，则输出“不及格”；</li></ul>",
                    "input_description": "<p>一个整数 n，其中 0 ≤ n ≤ 100。</p>",
                    "output_description": "<p>一行，根据学生的成绩给出不同的评语。</p>",
                    "samples": [
                        {
                            "input": "91",
                            "output": "优秀"
                        },
                        {
                            "input": "58",
                            "output": "不及格"
                        }
                    ],
                    "hint": "<p>本题为if...else语句的使用，需要注意的是，本题的输出为中文的“优秀”、“良好”、“及格”、“不及格”，需要按照题目要求进行输出，输出其它内容或者多输出无关信息都会导致判题错误。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341186&courseId=215304179&fid=0&knowledgeId=385131958\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:43:26.645234Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 432,
                    "accepted_number": 216,
                    "statistic_info": {
                        "0": 216,
                        "8": 65,
                        "-1": 28,
                        "-2": 123
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 449,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 163,
                    "title": "【4】水仙花数",
                    "description": "<p>输入一个三位数 n，判断是否为水仙花数。水仙花数是指一个三位数的每一位的立方之和等于这个数本身，比如 $153=1^3+5^3+3^3$。</p>",
                    "input_description": "<p>输入为一行，一个三位数n 。</p>",
                    "output_description": "<p>输出为一行，<strong>YES</strong>或者<strong>NO</strong>。</p>",
                    "samples": [
                        {
                            "input": "153",
                            "output": "YES"
                        },
                        {
                            "input": "123",
                            "output": "NO"
                        }
                    ],
                    "hint": "<p>本题明确说了输入的数x是一个3位数，如果该数每一位的立方之和等于这个数，说明该数为水仙花数，所以，问题的关键是我们如何获取到该3位数的每一位。</p><p>根据课堂上的知识，我们可以利用 x/100 得到该数的百位，利用 (x%100)/10 得到该数的十位，利用 x%10 得到该数的个位。</p><p>我们可以利用 a*a*a 得到a的立方，也可以利用头文件中的 pow(a, 3) 得到a的立方。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341323&courseId=215304179&fid=0&knowledgeId=385133920\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:43:19.254465Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 301,
                    "accepted_number": 166,
                    "statistic_info": {
                        "0": 166,
                        "4": 2,
                        "8": 67,
                        "-1": 13,
                        "-2": 53
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 444,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 164,
                    "title": "【4】根据日期判断是星期几",
                    "description": "<p>已知2019年1月1日是星期二，请根据输入的日期（年、月、日）判断是星期几。</p>",
                    "input_description": "<p>输入为一行，以空格分隔的3个整数 y, m, d, 分别表示年、月、日。</p>",
                    "output_description": "<p>输出为一行，一个整数（1~7，分别表示星期一~星期日，其中1表示星期一，7表示星期日）。</p>",
                    "samples": [
                        {
                            "input": "2019 3 25",
                            "output": "1"
                        },
                        {
                            "input": "2008 8 8",
                            "output": "5"
                        }
                    ],
                    "hint": "<p>可以根据基姆拉尔森计算公式来进行计算：</p><p>$ w = (d+2m+3(m+1)/5+y+y/4-y/100+y/400) mod 7 + 1$</p><p>注意：公式中的除法均为整除，并且要把1月和2月看成是上一年的13月和14月，例日：2004年1月10日 则换算成 2003年13月10日来代入公式计算。公式中得到的w的范围为1~7。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341415&courseId=215304179&fid=0&knowledgeId=385134538\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:40:52.827110Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 382,
                    "accepted_number": 134,
                    "statistic_info": {
                        "0": 134,
                        "4": 1,
                        "8": 116,
                        "-1": 38,
                        "-2": 93
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 443,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 209,
                    "title": "【5】求位数",
                    "description": "<p>输入一个不多于4位的正整数，求出它是几位数，并分别打印出各位的数字。</p>",
                    "input_description": "<p>一行，为一个不多于4位的正整数。</p>",
                    "output_description": "<p>两行，第1行为一个整数n，表示它是n位数；第2行为n个以空格分隔的整数，分别表示每一位上的数字。</p>",
                    "samples": [
                        {
                            "input": "267",
                            "output": "3\n2 6 7"
                        },
                        {
                            "input": "10",
                            "output": "2\n1 0"
                        },
                        {
                            "input": "2",
                            "output": "1\n2"
                        }
                    ],
                    "hint": "<p>目前我们只学了判断语句，可以考虑如何用 if...else结构来实现题目中要求的功能。</p><p>题目中输入的数据为不多于4位的正整数。比如一位数，很明显就是1~9，两位数就是10~99，三位数就是100~999，等等。所以我们可以用if ... else 语句来对数x进行判断，看x在哪个范围里面，输出位数之后，紧接着运用整除和取余操作获取到数x的每一位。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341843&courseId=215304179&fid=0&knowledgeId=369426904\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:40:49.193139Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 450,
                    "accepted_number": 167,
                    "statistic_info": {
                        "0": 167,
                        "1": 1,
                        "4": 4,
                        "8": 137,
                        "-1": 69,
                        "-2": 72
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 445,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 210,
                    "title": "【5】分段函数",
                    "description": "<p>编写程序，计算下列分段函数$y=f(x)$的值。结果保留到小数点后三位。</p><ul><li>$y=−x+2.5$; $(0≤x&lt;5)$</li><li>$y=2−1.5(x−3)(x−3)$; $(5≤x&lt;10)$</li><li>$y=\\frac{x}{2}−1.5$; $(10≤x&lt;20)$</li></ul>",
                    "input_description": "<p>一个浮点数 x (0≤x&lt;20)。</p>",
                    "output_description": "<p>输出 x 对应的分段函数值：$f(x)$，结果保留到小数点后三位。</p>",
                    "samples": [
                        {
                            "input": "1.0",
                            "output": "1.500"
                        },
                        {
                            "input": "15",
                            "output": "6.000"
                        }
                    ],
                    "hint": "<p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341853&courseId=215304179&fid=0&knowledgeId=385136616\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:41:04.158736Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 239,
                    "accepted_number": 139,
                    "statistic_info": {
                        "0": 139,
                        "8": 43,
                        "-1": 29,
                        "-2": 28
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 446,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 211,
                    "title": "【5】求星期几的英文名称",
                    "description": "<p>输入数字1~7表示星期一至星期日，输出对应的星期几的英文名称。对应关系表如下：</p><ul><li>星期一：Monday</li><li>星期二：Tuesday</li><li>星期三：Wednesday</li><li>星期四：Thursday</li><li>星期五：Friday</li><li>星期六：Saturday</li><li>星期日：Sunday</li></ul>",
                    "input_description": "<p>输入为一个数字，为1~7之间的一个整数，表示星期一~星期日。</p>",
                    "output_description": "<p>输出对应的英文，注意首字母大写。</p>",
                    "samples": [
                        {
                            "input": "1",
                            "output": "Monday"
                        },
                        {
                            "input": "7",
                            "output": "Sunday"
                        }
                    ],
                    "hint": "<p>同样需要注意switch(x)中的x与case中的数值是同类型的，此外不要把星期几的英语写错了。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675358225&courseId=215304179&fid=0&knowledgeId=371064787\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:41:07.520997Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 321,
                    "accepted_number": 191,
                    "statistic_info": {
                        "0": 191,
                        "8": 63,
                        "-1": 16,
                        "-2": 51
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 450,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 213,
                    "title": "【5】整除问题",
                    "description": "<p>给定一个整数，判断它能否被3，5，7整除，并输出以下信息：</p><ol><li>能同时被 3，5，7 整除（直接输出3 5 7，每个数中间一个空格）；</li><li>只能被其中两个数整除（输出两个数，小的在前，大的在后。例如：3 5 或者 3 7 或者 5 7，中间用空格分隔）；</li><li>只能被其中一个数整除（输出这个除数）；</li><li>不能被任何数整除，输出小写字符 ‘n’，不包括单引号。</li></ol>",
                    "input_description": "<p>输入一行，包括一个整数。</p>",
                    "output_description": "<p>输出一行，按照描述要求给出整数被3，5，7整除的情况。</p>",
                    "samples": [
                        {
                            "input": "105",
                            "output": "3 5 7"
                        },
                        {
                            "input": "22",
                            "output": "n"
                        }
                    ],
                    "hint": "<p>本题较难，题目要求判断一个数能否被3、5、7整除，数x能被3整除即 x%3==0。</p><p>要解决此题，我们只需要依次去判断数 x 能否被3整除（能就输出3），能否被5整除（能就输出5），能否被7整除（能就输出7）；如果数x不能被3、5、7整除，就输出小写字母<strong>n</strong>。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341916&courseId=215304179&fid=0&knowledgeId=385137894\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:43:23.396015Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Mid",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 319,
                    "accepted_number": 156,
                    "statistic_info": {
                        "0": 156,
                        "8": 107,
                        "-1": 10,
                        "-2": 46
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 441,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 251,
                    "title": "【6】求整数的和与均值",
                    "description": "<p>读入 n (1≤n≤10000)个整数，求它们的和与均值。</p>",
                    "input_description": "<p>输入第一行是一个整数 n，表示有 n 个整数。</p><p>第 2~n+1 行每行包含1个整数，每个整数的绝对值均不超过10000。</p>",
                    "output_description": "<p>输出一行，先输出和，再输出平均值(保留到小数点后5位)，两个数间用单个空格分隔。</p>",
                    "samples": [
                        {
                            "input": "4\n344\n222\n343\n222",
                            "output": "1131 282.75000"
                        }
                    ],
                    "hint": "<p>根据题目意思，我们知道要求 n 个数的和，那么就要输入 n 个数。怎么输入呢？实质上就是重复的在执行输入操作，那么我们就知道可以用循环来实现，在边输入的同时，我们还可以进行累加，没输入一个数就把结果累加到 sum 里面去。当全部输入完成之后，我们再求平均数就可以了，记得保留小数的写法喔。翻翻你们的笔记。</p><p>注意，题目中我们一开始输入的数是整数，我们知道整数除以整数还是整数，并不是真实的结果，所以，我们需要将除法运算中的最左边的整数转换为浮点数（小数），还记得怎么操作吗？</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341985&courseId=215304179&fid=0&knowledgeId=372443902\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:40:23.028656Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 295,
                    "accepted_number": 114,
                    "statistic_info": {
                        "0": 114,
                        "1": 2,
                        "4": 1,
                        "8": 35,
                        "-1": 104,
                        "-2": 39
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 434,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 252,
                    "title": "【6】各位相加",
                    "description": "<p>给定一个非负整数 n，反复将各位上的数字相加，直到结果为一位数。</p>",
                    "input_description": "<p>一个非负整数 n （0 ≤ n ≤ $10^9$）</p>",
                    "output_description": "<p>一位数</p>",
                    "samples": [
                        {
                            "input": "919",
                            "output": "1"
                        }
                    ],
                    "hint": "<p>输入<strong>919</strong>，处理过程为，$9 + 1 + 9 = 19$ → $1 + 9 = 10$ → $1 + 0 = 1$，输出<strong>1</strong>。</p><p>注意，我们是反复对结果进行各位相加，直至结果为1位数再输出。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341991&courseId=215304179&fid=0&knowledgeId=372444072\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:36:43.827772Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Mid",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 177,
                    "accepted_number": 100,
                    "statistic_info": {
                        "0": 100,
                        "1": 9,
                        "4": 3,
                        "8": 39,
                        "-1": 12,
                        "-2": 14
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 437,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 255,
                    "title": "【6】反转输入的数字",
                    "description": "<p>给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零。例如，输入210，反转后得到的新数为12；输入-380，反转后得到的新数为-83。</p>",
                    "input_description": "<p>输入共 1 行，一个整数N。（$-10^9 ≤ N≤ 10^9$）</p>",
                    "output_description": "<p>输出共 1 行，一个整数，表示反转后的新数。</p>",
                    "samples": [
                        {
                            "input": "123",
                            "output": "321"
                        },
                        {
                            "input": "1900",
                            "output": "91"
                        },
                        {
                            "input": "0",
                            "output": "0"
                        }
                    ],
                    "hint": "<p>本题稍有难度，直接倒序输出结果显然不行，我们可以运用数学计算方法，每次取数n的个位，加上上一次的结果s后，整体乘以10；依次循环，即可得出结果。</p><p><strong>注意，除非输入的数字为0，否则输出的数字最高位不为0。</strong></p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675341999&courseId=215304179&fid=0&knowledgeId=372444131\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:37:29.148939Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Mid",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 205,
                    "accepted_number": 96,
                    "statistic_info": {
                        "0": 96,
                        "1": 2,
                        "4": 5,
                        "8": 79,
                        "-1": 7,
                        "-2": 16
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 438,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 256,
                    "title": "【6】含k个3的数",
                    "description": "<p>输入两个正整数m和k，其中$1&lt;m&lt;10^9$，1&lt;k&lt;8 ，判断m 能否被19整除，且<strong>恰好</strong>含有k个3，如果满足条件，则输出YES，否则，输出NO。 例如，输入：43833 3，满足条件，输出YES。如果输入：39331 3，尽管有3个3，但不能被19整除，也不满足条件，应输出NO。</p>",
                    "input_description": "<p>输入为一行，2个正整数m 和 k，中间用单个空格间隔。</p>",
                    "output_description": "<p>满足条件时输出<strong>YES</strong>，不满足时输出<strong>NO</strong>。</p>",
                    "samples": [
                        {
                            "input": "333 3",
                            "output": "NO"
                        },
                        {
                            "input": "43833 3",
                            "output": "YES"
                        }
                    ],
                    "hint": "<p>数m需要满足2个条件才输出全大写的<strong>YES</strong>，否则输出全大写的<strong>NO</strong>。</p><p>判断数m是否含有k个3，我们可以依次数m的每一位，看该数是否等于3，统计出数m中到底含有多少个3。再看数m含有3的个数是否等于k。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=675342018&courseId=215304179&fid=0&knowledgeId=372444359\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:37:43.869875Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 180,
                    "accepted_number": 79,
                    "statistic_info": {
                        "0": 79,
                        "1": 5,
                        "4": 1,
                        "8": 72,
                        "-1": 5,
                        "-2": 18
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 442,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 308,
                    "title": "【7】乘方计算",
                    "description": "<p>给出一个整数a和一个正整数 n (-1000000≤a≤1000000，1≤n≤10000)，求乘方$a^n$，即乘方结果。题目保证最终结果的绝对值不超过1000000。</p>",
                    "input_description": "<p>一行，包含两个整数 a 和 n 。其中，-1000000≤a≤1000000，1≤n≤10000。</p>",
                    "output_description": "<p>一个整数，即乘方结果。题目保证最终结果的绝对值不超过1000000。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680737227&courseId=215304179&fid=0&knowledgeId=386664143\" target=\"_blank\">视频讲解</a><br /></p>",
                    "samples": [
                        {
                            "input": "2 3",
                            "output": "8"
                        },
                        {
                            "input": "2 10",
                            "output": "1024"
                        }
                    ],
                    "hint": "<p>题目意思就是求乘方，那么根据乘方的定义我们知道， a 的 n 次方，就是 a 连续的相乘 n 次。那么用我们所学的知识，就是循环的把 a 乘以 n 次就可以了。看看 for 循环的框架，相信你已经知道怎么做了。</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:40:26.261478Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 154,
                    "accepted_number": 125,
                    "statistic_info": {
                        "0": 125,
                        "1": 4,
                        "8": 3,
                        "-1": 15,
                        "-2": 7
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 440,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 311,
                    "title": "【7】求小数的某一位",
                    "description": "<p>分数$\\frac{a}{b}$化为小数后，小数点后第 n 位的数字是多少？</p>",
                    "input_description": "<p>三个正整数 a，b，n，相邻两个数之间用单个空格隔开。0&lt;a&lt;b&lt;100，1≤n≤10000。</p>",
                    "output_description": "<p>一个数字（0~9之间的整数）。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680742826&courseId=215304179&fid=0&knowledgeId=386664149\" target=\"_blank\">视频讲解</a><br /></p>",
                    "samples": [
                        {
                            "input": "5 7 5",
                            "output": "8"
                        },
                        {
                            "input": "11 91 14",
                            "output": "2"
                        }
                    ],
                    "hint": "<p>本题相对较难，直接利用内置的除法运算是无法得到精确的运算结果的，比如求小数的第50位，显然double类型也存不下精确到小数点后50的数。可以想想我们平时在纸上算除法时是怎么进行运算的，本题又是怎么与for循环联系起来的。</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:40:19.270123Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Mid",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 132,
                    "accepted_number": 79,
                    "statistic_info": {
                        "0": 79,
                        "8": 10,
                        "-1": 39,
                        "-2": 4
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 139,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 351,
                    "title": "【8】【数组】偶数单增序列",
                    "description": "<p>给定一个长度为N（不大于500）的正整数序列，请将其中的所有偶数取出，并按升序输出。</p>",
                    "input_description": "<p>第1行为 N；</p><p>第2行为 N 个正整数，其间用空格间隔。</p>",
                    "output_description": "<p>增序输出的偶数序列，数据之间以空格间隔。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680742852&courseId=215304179&fid=0&knowledgeId=386664183\" target=\"_blank\">视频讲解</a><br /></p>",
                    "samples": [
                        {
                            "input": "10\n1 3 2 6 5 4 9 8 7 10",
                            "output": "2 4 6 8 10"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-20T02:05:51.906870Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 191,
                    "accepted_number": 121,
                    "statistic_info": {
                        "0": 121,
                        "8": 39,
                        "-1": 9,
                        "-2": 22
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 394,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 352,
                    "title": "【8】猴子吃桃",
                    "description": "<p>编程计算猴子吃桃问题：有一天小猴摘了很多桃子，当即吃了一半，还觉得不过瘾，又多吃了一只；第二天接着吃了剩下的桃子中的一半，仍不过瘾，又多吃了一只；以后每天都吃尚存桃子的一半零一只。到第N天早上就只剩下一只了，问小猴那天共摘了多少只桃子。</p>",
                    "input_description": "<p>输入一行，包含一个整数N。</p>",
                    "output_description": "<p>输出桃子总数。</p>",
                    "samples": [
                        {
                            "input": "5",
                            "output": "46"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=10000</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680743009&courseId=215304179&fid=0&knowledgeId=386664462\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:39:23.840247Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 434,
                    "accepted_number": 365,
                    "statistic_info": {
                        "0": 365,
                        "1": 1,
                        "4": 1,
                        "8": 36,
                        "-1": 13,
                        "-2": 18
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 392,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 361,
                    "title": "【8】游泳",
                    "description": "<p>有一只小鱼，它上午游泳150公里，下午游泳100公里，晚上和周末都休息（实行双休日)，假设从周x(1&lt;=x&lt;=7)开始算起，请问这样过了n天以后，小鱼一共累计游泳了多少公里呢？</p>",
                    "input_description": "<p>输入两个整数x,n(表示从周x算起，经过n天）。</p>",
                    "output_description": "<p>输出一个整数，表示小鱼累计游泳了多少公里。</p>",
                    "samples": [
                        {
                            "input": "3 10",
                            "output": "2000"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=10000</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680742983&courseId=215304179&fid=0&knowledgeId=386664451\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:39:16.729005Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 231,
                    "accepted_number": 98,
                    "statistic_info": {
                        "0": 98,
                        "4": 1,
                        "8": 45,
                        "-1": 71,
                        "-2": 16
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 393,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 405,
                    "title": "【9】完全数",
                    "description": "<p>输入N，输出1~N中的所有完全数(完全数指除本身外的所有因子之和等于它本身的数,如6=1+2+3，6是完全数)</p>",
                    "input_description": "<p>一行，一个整数N。</p>",
                    "output_description": "<p>一行，N以内的所有完全数，整数之间以空格隔开。</p>",
                    "samples": [
                        {
                            "input": "10",
                            "output": "6"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=2000</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680743263&courseId=215304179&fid=0&knowledgeId=386665045\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:39:20.300224Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 135,
                    "accepted_number": 79,
                    "statistic_info": {
                        "0": 79,
                        "1": 3,
                        "4": 4,
                        "8": 31,
                        "-1": 12,
                        "-2": 6
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 433,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 434,
                    "title": "【9】找出低于平均分的数",
                    "description": "<p>小红最近参加了一场考试，成绩出来后，老师让小红把低于平均分的分数罗列出来。</p>",
                    "input_description": "<p>输入为2行。第1行输入分数的个数 n （1≤n≤100）；第2行输入 n 个分数（分数为非负整数），每两个分数之间用一个空格分隔。</p>",
                    "output_description": "<p>输出为1行，为低于平均分的分数。若有多个，则每两个分数之间用一个空格分隔。如果没有低于平均分的分数，则不输出。</p>",
                    "samples": [
                        {
                            "input": "5\n85 81 83 82 84",
                            "output": "81 82"
                        }
                    ],
                    "hint": "<p>我们可以先将分数存到一个数组中，再计算数组中分数的总和，将分数总和除以个数就可以得到平均分了，再依次将数组中的每个分数与平均分的进行大小比较。</p><p>需要注意的是，算平均数的时候，如果用整数除以整数，是得不出准确结果的，需要将前面一个整数转换成浮点数（小数）。</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=680743362&courseId=215304179&fid=0&knowledgeId=387006517\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:36:21.762521Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 153,
                    "accepted_number": 90,
                    "statistic_info": {
                        "0": 90,
                        "8": 41,
                        "-1": 16,
                        "-2": 6
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 386,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 453,
                    "title": "【10】三质数",
                    "description": "<p>一个数的约数也称为因子，比如1是6的因子，2是6的因子，6是6的因子。</p><p>质数只有两个因子，1和它本身</p><p>现在定义一种新的质数，三质数，三质数只有三个不同的因子。比如4是三质数，因为它有1,2,4三个因子。比如6不是三质数，因为6有1,2,3,6四个因子。现在有一些数，你需要判断他们是不是三质数。</p>",
                    "input_description": "<p>多组测试数据，每组测试数据输入一个整数n</p>",
                    "output_description": "<p>对于每组测试数据，判断是否是三质数，如果是输出YES，否则输出NO</p>",
                    "samples": [
                        {
                            "input": "4\n5\n6",
                            "output": "YES\nNO\nNO"
                        }
                    ],
                    "hint": "<p>约定：1&lt;=n&lt;=10^12,数据组数不超过10^3</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684296367&courseId=215304179&fid=0&knowledgeId=388334789\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:38:48.337092Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 275,
                    "accepted_number": 180,
                    "statistic_info": {
                        "0": 180,
                        "1": 6,
                        "4": 1,
                        "8": 24,
                        "-1": 52,
                        "-2": 12
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 387,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 454,
                    "title": "【10】百鸡问题",
                    "description": "<p>百鸡问题：一只公鸡值5元，一只母鸡值3元，而1元可买3只小鸡。现有x元钱，想买x只鸡，问可买公鸡、母鸡、小鸡各几只？</p>",
                    "input_description": "<p>一行，一个整数x，表示有x元，需要买x只鸡。</p>",
                    "output_description": "<p>若干行，表示x元分别买的公鸡、母鸡、小鸡的数目。</p>",
                    "samples": [
                        {
                            "input": "100",
                            "output": "0 25 75\n4 18 78\n8 11 81\n12 4 84"
                        }
                    ],
                    "hint": "<p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684296960&courseId=215304179&fid=0&knowledgeId=388334797\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:38:54.028802Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 226,
                    "accepted_number": 95,
                    "statistic_info": {
                        "0": 95,
                        "1": 1,
                        "4": 1,
                        "8": 22,
                        "-1": 84,
                        "-2": 23
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 388,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 455,
                    "title": "【10】优秀数",
                    "description": "<p>小马曾经说过，万物有优秀与猥琐之分。</p><p>他想要你帮忙确定一个数是否优秀。</p><p>小马认为，一个数优秀，当且仅当它有不超过 4 个因子。</p><p>求小于等于n的优秀的数的个数。</p>",
                    "input_description": "<p>一个正整数 n</p>",
                    "output_description": "<p>一个数表示答案</p>",
                    "samples": [
                        {
                            "input": "5",
                            "output": "5"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=100000</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684299420&courseId=215304179&fid=0&knowledgeId=388334801\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:38:58.567895Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 397,
                    "accepted_number": 110,
                    "statistic_info": {
                        "0": 110,
                        "1": 1,
                        "4": 1,
                        "8": 198,
                        "-1": 55,
                        "-2": 32
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 390,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 456,
                    "title": "【10】x、y计数1",
                    "description": "<p>设 [a] 表示 a 下取整后的结果。</p><p>给定一个正整数 n  ，求满足以下条件的正整数对 (x,y) 个数：x,y&lt;=n</p><p>[n/x]=[n/y]</p>",
                    "input_description": "<p>一个正整数 n</p>",
                    "output_description": "<p>一个数表示答案。</p>",
                    "samples": [
                        {
                            "input": "2",
                            "output": "2"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=1000</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684299822&courseId=215304179&fid=0&knowledgeId=388334822\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:39:07.993331Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 101,
                    "accepted_number": 65,
                    "statistic_info": {
                        "0": 65,
                        "4": 4,
                        "8": 10,
                        "-1": 10,
                        "-2": 12
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 389,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 457,
                    "title": "【10】x、y计数2",
                    "description": "<p>给定正整数 n，求满足以下条件的正整数二元组对 ((x1,y1),(x2,y2)) 个数：</p><p>1&lt;=x1,y1,x2,y2&lt;=n</p><p>(x1-y1)^2 + (x2-y2)^2 = n</p>",
                    "input_description": "<p>一个正整数 n</p>",
                    "output_description": "<p>一个数表示答案</p>",
                    "samples": [
                        {
                            "input": "2",
                            "output": "4"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=100</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684300223&courseId=215304179&fid=0&knowledgeId=388334930\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:39:02.871563Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 112,
                    "accepted_number": 60,
                    "statistic_info": {
                        "0": 60,
                        "1": 1,
                        "4": 1,
                        "8": 10,
                        "-1": 2,
                        "-2": 31
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 391,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 458,
                    "title": "【10】正整数对",
                    "description": "<p>给定正整数 n ，求满足 a*b+b = n 的有序正整数对 (a,b) 个数。</p>",
                    "input_description": "<p>一个正整数 n 。</p>",
                    "output_description": "<p>一个正整数表示答案。</p>",
                    "samples": [
                        {
                            "input": "10",
                            "output": "3"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=100</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684300354&courseId=215304179&fid=0&knowledgeId=388334939\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:39:13.064929Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 126,
                    "accepted_number": 94,
                    "statistic_info": {
                        "0": 94,
                        "1": 1,
                        "8": 5,
                        "-1": 10,
                        "-2": 16
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 396,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 459,
                    "title": "【10】计算f(n)",
                    "description": "<p>f(n)=n^2+2，计算f(1)+f(2)+...+f(n)的值</p>",
                    "input_description": "<p>一个正整数n</p>",
                    "output_description": "<p>一个正整数表示答案</p>",
                    "samples": [
                        {
                            "input": "1",
                            "output": "3"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=100</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684301154&courseId=215304179&fid=0&knowledgeId=388334941\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:40:05.715788Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 120,
                    "accepted_number": 76,
                    "statistic_info": {
                        "0": 76,
                        "4": 2,
                        "-1": 39,
                        "-2": 3
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 395,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 460,
                    "title": "【10】再次计算f(n)",
                    "description": "<p>f(n)=n^2+2，g(n) = f(1)+f(2)+...+f(n)，计算g(1)+g(2)+...+g(n)的值</p>",
                    "input_description": "<p>一个正整数n</p>",
                    "output_description": "<p>一个正整数表示答案</p>",
                    "samples": [
                        {
                            "input": "1",
                            "output": "3"
                        }
                    ],
                    "hint": "<p>1&lt;=n&lt;=100</p><p><a href=\"https://mooc1-1.chaoxing.com/resourcescontroller/showpreview?attachmentId=684302101&courseId=215304179&fid=0&knowledgeId=388334943\" target=\"_blank\">视频讲解</a><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T00:40:00.712558Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 138,
                    "accepted_number": 70,
                    "statistic_info": {
                        "0": 70,
                        "-1": 64,
                        "-2": 4
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 425,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 511,
                    "title": "【11】最长平台",
                    "description": "<p>已知一个已经从小到大排序的数组，这个数组的一个平台就是连续的一串值相同的元素，并且这一串元素不能再延伸。例如，在 1，2，2，3，3，3，4，5，5，6 中 1，2-2，3-3-3，4，5-5，6 都是平台。现要求你输入 n （1≤n≤1000）个数，求最长的平台的长度。</p>",
                    "input_description": "<p>输入为2行。</p><p>第1行输入一个正整数 n，表示待输入元素的个数。</p><p>第2行输入 n 个整数，表示输入的元素。</p>",
                    "output_description": "<p>输出为一个整数，即最长平台的长度。</p>",
                    "samples": [
                        {
                            "input": "10\n1 2 2 3 4 4 4 5 6 6",
                            "output": "3"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:35:07.110903Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 127,
                    "accepted_number": 62,
                    "statistic_info": {
                        "0": 62,
                        "1": 1,
                        "4": 1,
                        "8": 52,
                        "-1": 3,
                        "-2": 8
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 426,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 512,
                    "title": "【11】整数去重",
                    "description": "<p>给定含有n个整数的序列，要求对这个序列进行去重操作。所谓去重，是指对这个序列中每个重复出现的数，只保留该数第一次出现的位置，删除其余位置。</p>",
                    "input_description": "<p>输入包含两行：</p><p>第一行包含一个正整数n（1 ≤ n ≤ 20000），表示第二行序列中数字的个数；</p><p>第二行包含n个整数，整数之间以一个空格分开。每个整数小于等于5000。</p>",
                    "output_description": "<p>输出只有一行，按照输入的顺序输出其中不重复的数字，整数之间用一个空格分开。</p>",
                    "samples": [
                        {
                            "input": "5\n10 12 93 12 75",
                            "output": "10 12 93 75"
                        }
                    ],
                    "hint": "<p>我们可以采用标记的思想，先把数全部存到数组中，再弄一个标记数组（默认全为 true）。</p><p>我们遍历数组中每一个元素，把这个元素与之前的每一个元素进行比较，如果该元素与前面重复，就标记为 false。</p><p>最后我们再遍历数组，把标记为 true 的输出。</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:35:18.856414Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 113,
                    "accepted_number": 67,
                    "statistic_info": {
                        "0": 67,
                        "8": 36,
                        "-1": 6,
                        "-2": 4
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 428,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 608,
                    "title": "【13】倒序输出",
                    "description": "<p>小红能把别人的话倒背如流，你能帮她用一个程序实现吗？即输入一串字符串（可能含有空格），程序会倒序输出这段字符串。</p>",
                    "input_description": "<p>输入为一行，一串英文字符串（可能含有空格，英文符号），长度不超过1000。</p>",
                    "output_description": "<p>输出为一行，倒序输出的字符串。</p>",
                    "samples": [
                        {
                            "input": "I am a student.",
                            "output": ".tneduts a ma I"
                        },
                        {
                            "input": "www.mengmaoj.cn",
                            "output": "nc.joamgnem.www"
                        }
                    ],
                    "hint": "<p>输入的字符串可能含有空格，所以是不能使用cin或者scanf来直接读入字符串的，想一想，我们课堂上是怎么读入一整行字符串的？</p><p>此外，我们事先不知道字符串的真实长度，所以需要运用我们课堂上学的字符串函数来获取字符串的长度。</p>",
                    "languages": [
                        "C++",
                        "Python3"
                    ],
                    "create_time": "2019-07-24T07:35:39.572725Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 102,
                    "accepted_number": 72,
                    "statistic_info": {
                        "0": 72,
                        "4": 3,
                        "8": 10,
                        "-1": 10,
                        "-2": 7
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 427,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 610,
                    "title": "【13】提取数字",
                    "description": "<p>输入一串字符串（可能含有空格，长度不超过1000），将字符串中的所有数字提取出来并输出。</p>",
                    "input_description": "<p>输入为一行，为含有数字、字母、符号字符串，字符串中可能含有空格。</p>",
                    "output_description": "<p>输出为一行，将原字符串中的数字输出。</p>",
                    "samples": [
                        {
                            "input": "abc199xxxx1234.^%",
                            "output": "1991234"
                        }
                    ],
                    "hint": "<p>我们将字符串存到字符数组中去，再依次访问字符数组中的每一个元素，如果是数字就输出</p>",
                    "languages": [
                        "C++",
                        "Python3"
                    ],
                    "create_time": "2019-07-24T07:35:35.335847Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 120,
                    "accepted_number": 73,
                    "statistic_info": {
                        "0": 73,
                        "2": 1,
                        "4": 6,
                        "8": 18,
                        "-1": 9,
                        "-2": 13
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": 0
                },
                {
                    "id": 429,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 651,
                    "title": "【14】3倍放大器",
                    "description": "<p>有1个 $n×m$ 的矩阵，现在要求你将这个矩阵中放大到3倍输出。</p><p>【矩阵放大3倍，即矩阵中的每个元素都放大到3倍】</p>",
                    "input_description": "<p>输入有 n+1 行。</p><p>第1行，输入整数 n, m（0&lt;n,m&lt;10）,表示为 $n×m$ 的矩阵；</p><p>接下来n行，每行输入 m 个整数，为该矩阵的内容。</p>",
                    "output_description": "<p>输出n行，为放大3倍之后的结果。</p>",
                    "samples": [
                        {
                            "input": "2 3\n1 2 3\n4 5 6",
                            "output": "3 6 9\n12 15 18"
                        }
                    ],
                    "hint": "<p><img alt=\"2019-05-23_092056.png\" src=\"/public/upload/8ae6cdd61c.png\" width=\"800\" height=\"216\" /><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:35:54.091527Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 105,
                    "accepted_number": 80,
                    "statistic_info": {
                        "0": 80,
                        "4": 2,
                        "8": 13,
                        "-1": 2,
                        "-2": 8
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 430,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 652,
                    "title": "【14】矩阵的加法",
                    "description": "<p>有2个 $n × m$ 的矩阵，现在要求你将这2个矩阵相加之和输出结果。矩阵的运算规则如下：</p><p><img alt=\"1268375-20180113163117504-1421970332.png\" src=\"/public/upload/2f9d51c1c4.png\" width=\"447\" height=\"234\" /></p><p>例如：</p><p><img alt=\"下载.png\" src=\"/public/upload/ce1a8ddf0a.png\" width=\"435\" height=\"116\" /><br /></p>",
                    "input_description": "<p>输入有 2n+1 行。</p><p>第1行，输入整数 n, m（0&lt;n,m&lt;10）,表示为$n×m$的矩阵；</p><p>接下来n行，每行输入 m 个整数，为第1个矩阵的内容；</p><p>再接下来n行，每行输入 m 个整数，为第2个矩阵的内容；</p>",
                    "output_description": "<p>输出n行，为相加之后的结果。</p>",
                    "samples": [
                        {
                            "input": "2 3\n1 2 3\n4 5 6\n3 1 0\n1 2 1",
                            "output": "4 3 3\n5 7 7"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:35:58.040690Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 69,
                    "accepted_number": 60,
                    "statistic_info": {
                        "0": 60,
                        "8": 5,
                        "-1": 2,
                        "-2": 2
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 436,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 657,
                    "title": "【14】输出空心矩形",
                    "description": "<p>小红想画一个空心矩形，你知道怎么画吗？要求用*号输出一个空心矩形。</p>",
                    "input_description": "<p>输入2个正整数 a，b，分别表示空心矩形的长和宽。</p>",
                    "output_description": "<p>输出画好的空心矩形。</p>",
                    "samples": [
                        {
                            "input": "5 4",
                            "output": "****\n*   *\n*   *\n*   *\n****"
                        },
                        {
                            "input": "2 5",
                            "output": "*****\n*****"
                        }
                    ],
                    "hint": "<p>同学们还记得我们在课堂上是如何去画实心矩形的吗？空心矩形相较于实心矩形，可以发现只有内部不同（内部实际输出<strong>空格</strong>），故我们可以这样做，第1行和最后1行输出 * 号，第1列和最后1列输出 * 号，其余位置均输出<strong>空格</strong>。</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:37:06.986635Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 90,
                    "accepted_number": 58,
                    "statistic_info": {
                        "0": 58,
                        "8": 14,
                        "-1": 14,
                        "-2": 4
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 432,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 708,
                    "title": "【15】购物计算器",
                    "description": "<p>小红特别喜欢逛超市，但是面对满满一购物车的东西却犯了难，她想自己计算出购买这些商品需要花多少钱，你能帮帮她吗？</p>",
                    "input_description": "<p>输入有 n+1 行。第1行输入一个正整数 n（1≤n≤1000），表示小红购买的物品种类；接下来每一行输入该类物品的价格（为浮点数）和购买该类物品的数量（为正整数）。</p>",
                    "output_description": "<p>输出为1行，表示总金额（保留到小数点后2位）。</p>",
                    "samples": [
                        {
                            "input": "5\n12.4 3\n51 1\n38.78 2\n11.2 6\n99 1",
                            "output": "331.96"
                        }
                    ],
                    "hint": "<p>本题为常规题，只需要用2个数组分别将物品价格个数量存起来即可，需要注意价格为浮点数，最后输出总价要保留2位小数。</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:36:17.885915Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 99,
                    "accepted_number": 72,
                    "statistic_info": {
                        "0": 72,
                        "8": 19,
                        "-1": 4,
                        "-2": 2
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 431,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 709,
                    "title": "【15】麻烦关下灯",
                    "description": "<p>假设有 N 盏灯（1≤N≤5000），从<strong>1 到 N</strong>按顺序依次编号，初始时全部处于<strong>开启</strong>状态；有 M 个人（1≤M≤N）也从<strong>1 到 M</strong>依次编号。</p><p>第一个人(1号)将灯全部关闭，第二个人(2号)将编号为2的倍数的灯打开，第三个人(3号)将编号为3的倍数的灯做相反处理（即将打开的灯关闭，将关闭的灯打开）。依照编号递增顺序，以后的人都和3号一样，将凡是自己编号倍数的灯做相反处理。</p><p>请问：当第M个人操作之后，哪几盏灯是关闭的，按从小到大输出其编号，2个数之间用一个空格隔开。</p>",
                    "input_description": "<p>输入为1行，为正整数 N 和 M （1≤M≤N≤5000），用一个空格隔开。</p>",
                    "output_description": "<p>输出为1行，从小到大输出关闭着的灯的编号，每2个数之间用空格隔开。</p>",
                    "samples": [
                        {
                            "input": "10 10",
                            "output": "1 4 9"
                        }
                    ],
                    "hint": "<p><img alt=\"TIM截图20190523115507.png\" src=\"/public/upload/cfac0db06a.png\" width=\"800\" height=\"440\" /><br /></p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:36:13.719839Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Mid",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 76,
                    "accepted_number": 53,
                    "statistic_info": {
                        "0": 53,
                        "8": 18,
                        "-1": 5
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 138,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 1,
                        "username": "root",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1959,
                    "title": "【18】随机数",
                    "description": "<p>明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作。</p>",
                    "input_description": "<p>有2行，第1行为1个正整数，表示所生成的随机数的个数：N；</p><p>第2行有N个用空格隔开的正整数，为所产生的随机数。</p>",
                    "output_description": "<p>也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</p>",
                    "samples": [
                        {
                            "input": "10\n20 40 32 67 40 20 89 300 400 15",
                            "output": "8\n15 20 32 40 67 89 300 400"
                        }
                    ],
                    "hint": "",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-05-20T02:05:47.657088Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 194,
                    "accepted_number": 107,
                    "statistic_info": {
                        "0": 107,
                        "4": 1,
                        "8": 8,
                        "-1": 21,
                        "-2": 57
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                },
                {
                    "id": 435,
                    "tags": [
                        "L1"
                    ],
                    "created_by": {
                        "id": 3,
                        "username": "loveshes",
                        "real_name": null
                    },
                    "template": {},
                    "_id": 1997,
                    "title": "判断一个数是否是4的幂次【252】",
                    "description": "<p>给定一个正整数 n (1≤n≤1000000)，请编写一个函数来判断它是否是 4 的幂次方。</p>",
                    "input_description": "<p>一个整数 n。</p>",
                    "output_description": "<p>输出<strong>Yes</strong>或者<strong>No</strong>（若 n 是4的幂次方，则输出<strong>Yes</strong>，否则输出<strong>No</strong>)</p>",
                    "samples": [
                        {
                            "input": "16",
                            "output": "Yes"
                        },
                        {
                            "input": "8",
                            "output": "No"
                        },
                        {
                            "input": "9",
                            "output": "No"
                        }
                    ],
                    "hint": "<p>4的幂次方是指，这个数可以写成 $4^x$ 的形式，即 这个数等于 x 个4相乘（x事先是不知道的）。</p><p>我们观察到，如果数n是4的幂次方，则n一直除以4一直除以4，最后总会得到1。我们可以利用这个特性来解答。</p>",
                    "languages": [
                        "C++"
                    ],
                    "create_time": "2019-07-24T07:36:47.840283Z",
                    "last_update_time": null,
                    "time_limit": 1000,
                    "memory_limit": 256,
                    "io_mode": {
                        "input": "input.txt",
                        "output": "output.txt",
                        "io_mode": "Standard IO"
                    },
                    "spj": false,
                    "spj_language": null,
                    "rule_type": "OI",
                    "difficulty": "Low",
                    "source": "",
                    "total_score": 100,
                    "submission_number": 234,
                    "accepted_number": 75,
                    "statistic_info": {
                        "0": 75,
                        "1": 2,
                        "8": 108,
                        "-1": 22,
                        "-2": 11
                    },
                    "share_submission": false,
                    "contest": null,
                    "my_status": null
                }
            ],
            "total": 45
        },
        "_expanded": true,
        "_disableExpand": false
    },
    {
        "problemListName": "黄金",
        "problemList": [],
        "problemListTag": "L3",
        "data": {},
        "_expanded": false,
        "_disableExpand": false
    },
    {
        "problemListName": "铂金",
        "problemList": [],
        "problemListTag": "L3",
        "data": {},
        "_expanded": false,
        "_disableExpand": false
    },
    {
        "problemListName": "钻石",
        "problemList": [],
        "problemListTag": "L3",
        "data": {},
        "_expanded": false,
        "_disableExpand": false
    },
    {
        "problemListName": "星耀",
        "problemList": [],
        "problemListTag": "L3",
        "data": {},
        "_expanded": false,
        "_disableExpand": false
    },
    {
        "problemListName": "王者",
        "problemList": [],
        "problemListTag": "L3",
        "data": {},
        "_expanded": false,
        "_disableExpand": false
    },
    {
        "problemListName": "最强王者",
        "problemList": [],
        "problemListTag": "L3",
        "data": {},
        "_expanded": false,
        "_disableExpand": false
    },
    {
        "problemListName": "最强王者2",
        "problemList": [],
        "problemListTag": "L3",
        "data": {
            "results": [
                {
                    "_id": 8,
                    "title": "gg"
                },
                {
                    "_id": 12,
                    "title": "gg",
                    "my_status": 0
                }
            ]
        },
        "_expanded": false,
        "_disableExpand": false
    }
]